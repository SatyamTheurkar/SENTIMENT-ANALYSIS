# -*- coding: utf-8 -*-
"""Satyam_Theurkar_TASK_4. Perform sentiment analysis on textual data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iIzBBDlW1dd4CKQZuVohu0WjjEcchsFt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
nltk.download('vader_lexicon')

df = pd.read_csv("/content/drive/MyDrive/task data set/phone_tweets.csv")
df.head()

df = df[df['language'] == 'en'].copy()

def clean_tweet(text):
    text = re.sub(r"http\S+", "", text)
    text = re.sub(r"@[A-Za-z0-9_]+", "", text)
    text = re.sub(r"#", "", text)
    text = re.sub(r"[^a-zA-Z ]", "", text)
    text = text.lower()
    return text

df["clean_tweet"] = df["tweet"].apply(clean_tweet)
df[["tweet", "clean_tweet"]].head()

sid = SentimentIntensityAnalyzer()

def get_sentiment(score):
    if score >= 0.05:
        return "Positive"
    elif score <= -0.05:
        return "Negative"
    else:
        return "Neutral"

df["compound_score"] = df["clean_tweet"].apply(lambda x: sid.polarity_scores(x)["compound"])
df["sentiment"] = df["compound_score"].apply(get_sentiment)

df[["clean_tweet", "compound_score", "sentiment"]].head()

plt.figure(figsize=(6, 4))
sns.countplot(data=df, x="sentiment", palette="coolwarm")
plt.title("Overall Sentiment Distribution")
plt.show()

sentiment_by_phone = df.groupby(["phone name", "sentiment"]).size().unstack().fillna(0)
sentiment_by_phone.plot(kind="bar", stacked=True, figsize=(12, 6), colormap="viridis")
plt.title("Sentiment Distribution by Phone")
plt.ylabel("Tweet Count")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

top_positive = df[df["sentiment"] == "Positive"].sort_values(by="likes_count", ascending=False).head(5)
top_positive[["phone name", "clean_tweet", "likes_count", "link"]]

df.to_csv("sentiment_analysis_output.csv", index=False)
print("Saved output to sentiment_analysis_output.csv")